import sys
import pygame
import pygame.mixer
from collision import*
from mapp import Map
from player import Player
from projectiles import*
from enemy import*
from info_bar import*
from menu import Button, Menu, MainMenu
from particles import*
from sounds import SoundManager

FPS = 30
fps_clock = pygame.time.Clock()
WINDOWWIDTH = WINDOW_WIDTH
WINDOWHEIGHT = WINDOW_HEIGHT

global FPSCLOCK, DISPLAYSURF, CAMERA
pygame.init()
FPSCLOCK = pygame.time.Clock()
DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))
pygame.display.set_caption('R Type')

CAMERA = Vector2(0, 0)

game_state = MENU
collision_manager = CollisionManager()
particle_manager = ParticleManager()
sounds_manager = SoundManager()
info = Bar()
menu = MainMenu()

level = Map("Assets/level1.png", "Assets/level1_collision2.png")
player = Player(INIT_PLAYER_POS, "Assets/player.png")
player_bullets = []
enemy_bullets = []
enemies = []


def main():
    initialize()
    while True:  # main game loop
        DISPLAYSURF.fill((255, 255, 255))
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

        update()
        draw()
        pygame.display.update()
        fps_clock.tick(FPS)


def initialize():
    CAMERA.x -= CAMERA.x

    particle_manager.restart()
    player.initialize(INIT_PLAYER_POS)

    del player_bullets[0:len(player_bullets)]
    del enemy_bullets[0:len(enemy_bullets)]
    del enemies[0:len(enemies)]

    #ENEMIES
    #flying soucer
    fs_texture = "Assets/enemy_flying_1.png"
    e_fs_1 = FlyingSoucer(Vector2(1500, 200), Vector2(0, 1), 4, fs_texture,
                          8, 5)
    e_fs_2 = FlyingSoucer(Vector2(1580, 150), Vector2(0, 1), 4, fs_texture,
                          8, 5)
    e_fs_3 = FlyingSoucer(Vector2(1660, 100), Vector2(0, 1), 4, fs_texture,
                          8, 5)
    e_fs_4 = FlyingSoucer(Vector2(1740, 150), Vector2(0, -1), 4, fs_texture,
                          8, 5)
    e_fs_5 = FlyingSoucer(Vector2(1820, 200), Vector2(0, -1), 4, fs_texture,
                          8, 5)
    e_fs_6 = FlyingSoucer(Vector2(1900, 250), Vector2(0, -1), 4, fs_texture,
                          8, 5)
    e_fs_7 = FlyingSoucer(Vector2(1980, 300), Vector2(0, 1), 4, fs_texture,
                          8, 5)
    e_fs_8 = FlyingSoucer(Vector2(2060, 250), Vector2(0, 1), 4, fs_texture,
                          8, 5)
    enemies.append(e_fs_1)
    enemies.append(e_fs_2)
    enemies.append(e_fs_3)
    enemies.append(e_fs_4)
    enemies.append(e_fs_5)
    enemies.append(e_fs_6)
    enemies.append(e_fs_7)
    enemies.append(e_fs_8)

    #walker
    w_text = "Assets/walker_1.png"
    e_walker_1 = Walker(Vector2(1500, 420), Vector2(0, 1), 4, w_text, 3, 6)
    enemies.append(e_walker_1)

    #turret
    turret_text = "Assets/turret_bot.png"
    e_turret_1 = Turret(Vector2(2000, 390), Vector2(0, 1), 4, turret_text,
                        6, 10)
    enemies.append(e_turret_1)

    #suicide
    s_text = "Assets/suicide.png"
    e_suicide_1 = Suicide(Vector2(2500, 300), Vector2(0, 0), 5, s_text, 6, 15)
    e_suicide_2 = Suicide(Vector2(2600, 300), Vector2(0, 0), 5, s_text, 6, 15)
    e_suicide_3 = Suicide(Vector2(2700, 300), Vector2(0, 0), 5, s_text, 6, 15)
    e_suicide_4 = Suicide(Vector2(2800, 300), Vector2(0, 0), 5, s_text, 6, 15)
    e_suicide_5 = Suicide(Vector2(2900, 300), Vector2(0, 0), 5, s_text, 6, 15)
    e_suicide_6 = Suicide(Vector2(3000, 300), Vector2(0, 0), 5, s_text, 6, 15)
    e_suicide_7 = Suicide(Vector2(3100, 300), Vector2(0, 0), 5, s_text, 6, 15)
    e_suicide_8 = Suicide(Vector2(3200, 300), Vector2(0, 0), 5, s_text, 6, 15)
    e_suicide_9 = Suicide(Vector2(3300, 300), Vector2(0, 0), 5, s_text, 6, 15)
    enemies.append(e_suicide_1)
    enemies.append(e_suicide_2)
    enemies.append(e_suicide_3)
    enemies.append(e_suicide_4)
    enemies.append(e_suicide_5)
    enemies.append(e_suicide_6)
    enemies.append(e_suicide_7)
    enemies.append(e_suicide_8)
    enemies.append(e_suicide_9)


def update():
    if game_state is MENU:
        if menu.update() is True:
            global game_state
            game_state = PLAYING
        return

    key_pressed = pygame.key.get_pressed()
    if key_pressed[K_r]:
        initialize()
    if player.lives < 1:
        return
    update_movement()

    collision()

    update_states()


def update_movement():
    CAMERA.x += CAMERA_SPEED
    level.move(CAMERA)
    if player.move(Vector2(WINDOWWIDTH, level.texture.get_rect().bottom)):
        bullet = PlayerBullet("Assets/basic_gun_bullets.png", 4,
                              Vector2(player.rect.center), Vector2(1, 0),
                              player.weapon_power)
        player_bullets.append(bullet)
        player.reset_charge()
        sounds_manager.player_blast.play()

    for enemy in enemies:
        if enemy.move(CAMERA):
            enemy_type = enemy.get_type()
            if enemy_type == FLYING_SOUCER:
                vec_dir = Vector2(-1, 0)
            elif enemy_type == WALKER or enemy_type == TURRET:
                vec_dir = enemy.get_dir(player.rect.center, CAMERA)

            bullet = EnemyBullet("Assets/bullet_small.png", 1,
                                 Vector2(enemy.rect.center)-CAMERA,
                                 vec_dir, 0)
            enemy_bullets.append(bullet)
            volume = sounds_manager.volume(player.get_onscr_pos(CAMERA),
                                           enemy.get_onscr_pos(CAMERA))
            blast_sound = pygame.mixer.Sound(sounds_manager.enemy_blast)
            blast_sound.set_volume(volume)
            blast_sound.play()

    for bullet in player_bullets:
        bullet.move()

    for bullet in enemy_bullets:
        bullet.move()

    particle_manager.update()


def update_states():
    update_bullets()
    update_enemies()


def update_bullets():
    dead_bullets = []
    dead_index = 0
    for bullet in player_bullets:
        if not bullet.active:
            dead_bullets.insert(0, dead_index)
        dead_index += 1
    for index in dead_bullets:
        player_bullets.pop(index)

    dead_bullets = []
    dead_index = 0
    for bullet in enemy_bullets:
        if not bullet.active:
            dead_bullets.insert(0, dead_index)
        dead_index += 1
    for index in dead_bullets:
        enemy_bullets.pop(index)


def update_enemies():
    dead_enemies = []
    dead_index = 0
    for enemy in enemies:
        if not enemy.active:
            dead_enemies.insert(0, dead_index)
        dead_index += 1
    for index in dead_enemies:
        enemies.pop(index)


def collision():
    player_mask = player.texture.get_collision_mask()
    colliding = collision_manager.map_collision(level,
                                                player.get_world_rect(CAMERA),
                                                player_mask)
    if colliding:
        if player.immortal is False:
            explosion = Explosion(EXP_TEXTURE, EXP_FRAMES,
                                  Vector2(player.get_onscr_pos(CAMERA)),
                                  Vector2(-1, 0), CAMERA_SPEED)
            particle_manager.add_particle(explosion)
        sounds_manager.player_explosion.play()
        player.kill(INIT_PLAYER_POS)
    for enemy in enemies:
        colliding = collision_manager.are_colliding(player, enemy, CAMERA)
        if colliding:
            explosion = Explosion(EXP_TEXTURE, EXP_FRAMES,
                                  enemy.get_onscr_pos(CAMERA), Vector2(-1, 0),
                                  CAMERA_SPEED)
            particle_manager.add_particle(explosion)
            if player.immortal is False:
                explosion = Explosion(EXP_TEXTURE, EXP_FRAMES,
                                      Vector2(player.get_onscr_pos(CAMERA)),
                                      Vector2(-1, 0), CAMERA_SPEED)
                particle_manager.add_particle(explosion)
            player.add_score(enemy.get_points())
            enemy.kill()
            player.kill(INIT_PLAYER_POS)
            sounds_manager.player_explosion.play()
        for bullet in player_bullets:
            colliding = collision_manager.are_colliding(enemy, bullet, CAMERA)
            if colliding:
                explosion = Explosion(EXP_TEXTURE, EXP_FRAMES,
                                      enemy.get_onscr_pos(CAMERA),
                                      Vector2(-1, 0), CAMERA_SPEED)
                particle_manager.add_particle(explosion)
                if not bullet.is_max_power():
                    bullet.kill()
                enemy.kill()
                player.add_score(enemy.get_points())
                volume = sounds_manager.volume(player.get_onscr_pos(CAMERA),
                                               enemy.get_onscr_pos(CAMERA))
                sounds_manager.enemy_explosion.set_volume(volume)
                sounds_manager.enemy_explosion.play()

    for bullet in enemy_bullets:
        colliding = collision_manager.are_colliding(player, bullet, CAMERA)
        if colliding:
            if player.immortal is False:
                explosion = Explosion(EXP_TEXTURE, EXP_FRAMES,
                                      Vector2(player.get_onscr_pos(CAMERA)),
                                      Vector2(-1, 0), CAMERA_SPEED)
                particle_manager.add_particle(explosion)
            bullet.kill()
            player.kill(INIT_PLAYER_POS)


def draw():
    if game_state is MENU:
        menu.draw(DISPLAYSURF)
        return
    level.draw(DISPLAYSURF)
    info.draw(DISPLAYSURF, player.get_charge(), player.score, player.lives)
    particle_manager.draw(DISPLAYSURF)

    for bullet in player_bullets:
        bullet.draw(DISPLAYSURF)
    for bullet in enemy_bullets:
        bullet.draw(DISPLAYSURF)

    player.draw(DISPLAYSURF)

    for enemy in enemies:
        enemy.draw(DISPLAYSURF, CAMERA)

    if player.lives < 1:
        font = pygame.font.SysFont(FONT, 60)
        game_over = font.render("GAME OVER", 1, (255, 0, 0))
        DISPLAYSURF.blit(game_over, (500, 300))
        font = pygame.font.SysFont(FONT, 20)
        font.set_italic(True)
        restart = font.render("Press  R  to restart", 1, (255, 0, 0))
        DISPLAYSURF.blit(restart, (550, 370))


main()
